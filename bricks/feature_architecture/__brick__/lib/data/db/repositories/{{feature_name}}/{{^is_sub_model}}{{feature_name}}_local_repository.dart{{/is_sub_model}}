import 'package:{{project_name}}/data/db/entities/{{feature_name}}/{{feature_name}}_entity.dart';
import 'package:{{project_name}}/data/db/mappers/{{feature_name}}/{{feature_name}}_entity_mapper.dart';
import 'package:{{project_name}}/domain/models/{{feature_name}}/{{feature_name}}.dart';
import 'package:{{project_name}}/domain/repository/{{feature_name}}/i_{{feature_name}}_local_repository.dart';
{{#sub_model_list_names}}import 'package:{{project_name}}/data/db/entities/{{feature_name}}/{{model_name}}_entity.dart';
{{/sub_model_list_names}}
import 'package:hive/hive.dart';

class {{feature_name.pascalCase()}}LocalRepository
    implements I{{feature_name.pascalCase()}}LocalRepository {
  {{feature_name.pascalCase()}}LocalRepository() {}
  @override
  Future<List<{{feature_name.pascalCase()}}>?> get{{feature_name.pascalCase()}}List() async {
    final box =
        await Hive.openBox({{hive_number}}.toString());
    final entities = List<{{feature_name.pascalCase()}}Entity>.from(box.values);

    return entities
        .map((entity) => {{feature_name.pascalCase()}}EntityMapperImpl().toModel(entity))
        .toList();
  }

  @override
  Future<bool> save{{feature_name.pascalCase()}}List(List<{{feature_name.pascalCase()}}> contacts) async {
    final box =
        await Hive.openBox({{hive_number}}.toString());
    final entities = contacts
        .map((entity) => {{feature_name.pascalCase()}}EntityMapperImpl().fromModel(entity))
        .toList();
    await box.clear();
    box.addAll(entities);
    return true;
  }

  @override
  Future<bool> clearCache() async {
    final box =
        await Hive.openBox({{hive_number}}.toString());
    box.clear();
    return true;
  }
}
